一：定义：
1）有且只有一个称为根的节点；
2）有若干个互不相交的子树，这些子树本身也是一颗树；
通俗一点讲，根由节点和边组成，每个节点只有一个父节点，但是可以有多个子节点，但有一个节点除外，这个节点没有父节点，
此节点称为根节点。

专业术语：
节点：
父节点：
子节点：
子孙节点：
堂兄弟：
深度：从根节点到最底层节点的层数(根节点为第一层，其子节点为第二层……)
叶子节点：没有子节点的节点(度为0)，非0为终端节点
度：拥有的子树的个数

树的分类：
1）一般树：任意一个子节点的个数都不受限制；
2）二叉树：子节点的个数最多两个，并且，其子树有左右之分，其次序不能任意颠倒；
3）森林：n个互补相交的树的集合

二叉树又分为：
1）一般二叉树；
2）满二叉树；除了叶子节点外，每一个节点都有左右子树
3）完全二叉树：如果只删除了满二叉树最底层最右边的连续若干个节点，这样形成的二叉树就是
		完全二叉树。

二叉树的存储形式
1）顺序存储：把一颗普通的二叉树，填补成一颗完全二叉树，然后按照从上至下，从左至右，1-n的编号进行
		存储，可能会浪费一些空间。
	#define MAX_TREE_SIZE 100
	char tree[MAX_TREE_SIZE]
2）链式存储结构:
	struct bitnode
	{
		int data;
		struct bitnode *lchild,*rchild;
	}


树的遍历：
1）先序；根->左->右
2）中序；左->根->右
3) 后序；左->右->根

二叉排序树
	或者是一颗空树，或者是具有下列顺序的二叉树：
1）若他的左子树不为空，则左子树上面所有的节点都小于他的根节点，
2）若他的右子树不为空，则右子树上面所有的节点都大于他的根节点；
3）左右子树又分别是二叉排序树；


平衡二叉树：
	它或者是一颗空树，或者是具有以下性质的树：
1）他的左子树和右子树又是一颗平衡二叉树
2) 左子树和右子树的深度之差不超过1(-1,0,1);

若将二叉树上的节点的平衡因子BF(Balance factor)定义为该节点的左子树减去他的右子树的深度，
则平衡二叉树的所有节点的平衡因子的绝对值不大于1，如果BF的绝对值大于1，则该二叉树就是不平衡的。
单右旋 SingleRotateWithRight(SRWR)
单左旋 SingleRotateWithLeft(SRWL)
双向先左后右旋转 DoubleRotateLeftRight(DRLR)
双向先右后左旋转 DoubleRotateRightLeft(DRRL)








